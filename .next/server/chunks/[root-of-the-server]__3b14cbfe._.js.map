{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 43, "column": 0}, "map": {"version":3,"sources":["file:///C:/Proyectos/estratego-web/app/api/simulate/route.ts"],"sourcesContent":["// app/api/simulate/route.ts\r\nexport const dynamic = \"force-dynamic\";\r\n\r\n\r\ntype Player = { id: string; name: string; seed?: number; country?: string };\r\n\r\n\r\ntype Match = { id: string; round: 'R16'|'QF'|'SF'|'F'; top: Player; bottom: Player; winnerId?: string };\r\n\r\n\r\ntype Bracket = { tournamentId: string; event: string; surface: string; drawSize: number; matches: Match[] };\r\n\r\n\r\nfunction nextRound(r: Match['round']): Match['round'] { return r==='R16'?'QF':r==='QF'?'SF':r==='SF'?'F':'F'; }\r\n\r\n\r\nfunction simulate(bracket: Bracket): Bracket {\r\nconst rnd = (n: number) => Math.floor(Math.random() * n);\r\nconst copy: Bracket = JSON.parse(JSON.stringify(bracket));\r\nconst rounds: Match['round'][] = ['R16','QF','SF','F'];\r\nfor (const round of rounds) {\r\nconst ms = copy.matches.filter(m => m.round === round).sort((a,b)=>a.id.localeCompare(b.id));\r\nfor (const m of ms) {\r\nconst favBias = (m.top.seed ?? 99) < (m.bottom.seed ?? 99) ? 58 : 42;\r\nconst coin = rnd(100);\r\nconst win = coin < favBias ? m.top : m.bottom;\r\nm.winnerId = win.id;\r\n}\r\nif (round !== 'F') {\r\nconst winners = ms.map(m => (m.winnerId === m.top.id ? m.top : m.bottom));\r\nconst next: Match[] = [];\r\nfor (let i=0;i<winners.length;i+=2) {\r\nnext.push({ id: `${nextRound(round)}-${Math.floor(i/2)+1}`, round: nextRound(round), top: winners[i], bottom: winners[i+1] });\r\n}\r\ncopy.matches = copy.matches.filter(m => m.round !== nextRound(round)).concat(next);\r\n}\r\n}\r\nreturn copy;\r\n}\r\n\r\n\r\nexport async function POST(req: Request) {\r\nconst body = await req.json();\r\nconst { tournamentId } = body || {};\r\nif (!tournamentId) return new Response(JSON.stringify({ error: 'tournamentId requerido' }), { status: 400 });\r\n// 1) Obtener bracket base\r\nconst base = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL ?? ''}/api/tournament/${tournamentId}`).then(r=>r.json());\r\n// 2) Simular\r\nconst result = simulate(base);\r\nreturn new Response(JSON.stringify(result), { status: 200, headers: { 'content-type': 'application/json' } });\r\n}\r\n\r\n\r\n"],"names":[],"mappings":"AAAA,4BAA4B;;;;;;;AACrB,MAAM,UAAU;AAYvB,SAAS,UAAU,CAAiB;IAAoB,OAAO,MAAI,QAAM,OAAK,MAAI,OAAK,OAAK,MAAI,OAAK,MAAI;AAAK;AAG9G,SAAS,SAAS,OAAgB;IAClC,MAAM,MAAM,CAAC,IAAc,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK;IACtD,MAAM,OAAgB,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC;IAChD,MAAM,SAA2B;QAAC;QAAM;QAAK;QAAK;KAAI;IACtD,KAAK,MAAM,SAAS,OAAQ;QAC5B,MAAM,KAAK,KAAK,OAAO,CAAC,MAAM,CAAC,CAAA,IAAK,EAAE,KAAK,KAAK,OAAO,IAAI,CAAC,CAAC,GAAE,IAAI,EAAE,EAAE,CAAC,aAAa,CAAC,EAAE,EAAE;QAC1F,KAAK,MAAM,KAAK,GAAI;YACpB,MAAM,UAAU,CAAC,EAAE,GAAG,CAAC,IAAI,IAAI,EAAE,IAAI,CAAC,EAAE,MAAM,CAAC,IAAI,IAAI,EAAE,IAAI,KAAK;YAClE,MAAM,OAAO,IAAI;YACjB,MAAM,MAAM,OAAO,UAAU,EAAE,GAAG,GAAG,EAAE,MAAM;YAC7C,EAAE,QAAQ,GAAG,IAAI,EAAE;QACnB;QACA,IAAI,UAAU,KAAK;YACnB,MAAM,UAAU,GAAG,GAAG,CAAC,CAAA,IAAM,EAAE,QAAQ,KAAK,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,MAAM;YACvE,MAAM,OAAgB,EAAE;YACxB,IAAK,IAAI,IAAE,GAAE,IAAE,QAAQ,MAAM,EAAC,KAAG,EAAG;gBACpC,KAAK,IAAI,CAAC;oBAAE,IAAI,GAAG,UAAU,OAAO,CAAC,EAAE,KAAK,KAAK,CAAC,IAAE,KAAG,GAAG;oBAAE,OAAO,UAAU;oBAAQ,KAAK,OAAO,CAAC,EAAE;oBAAE,QAAQ,OAAO,CAAC,IAAE,EAAE;gBAAC;YAC3H;YACA,KAAK,OAAO,GAAG,KAAK,OAAO,CAAC,MAAM,CAAC,CAAA,IAAK,EAAE,KAAK,KAAK,UAAU,QAAQ,MAAM,CAAC;QAC7E;IACA;IACA,OAAO;AACP;AAGO,eAAe,KAAK,GAAY;IACvC,MAAM,OAAO,MAAM,IAAI,IAAI;IAC3B,MAAM,EAAE,YAAY,EAAE,GAAG,QAAQ,CAAC;IAClC,IAAI,CAAC,cAAc,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;QAAE,OAAO;IAAyB,IAAI;QAAE,QAAQ;IAAI;IAC1G,0BAA0B;IAC1B,MAAM,OAAO,MAAM,MAAM,GAAG,QAAQ,GAAG,CAAC,oBAAoB,IAAI,GAAG,gBAAgB,EAAE,cAAc,EAAE,IAAI,CAAC,CAAA,IAAG,EAAE,IAAI;IACnH,aAAa;IACb,MAAM,SAAS,SAAS;IACxB,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC,SAAS;QAAE,QAAQ;QAAK,SAAS;YAAE,gBAAgB;QAAmB;IAAE;AAC3G","debugId":null}}]
}