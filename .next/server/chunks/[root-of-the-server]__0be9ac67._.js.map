{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file:///C:/Proyectos/estratego-web/lib/supabase.ts"],"sourcesContent":["// lib/supabase.ts\r\nimport { createClient } from \"@supabase/supabase-js\";\r\n\r\n\r\nexport const supabase = createClient(\r\nprocess.env.NEXT_PUBLIC_SUPABASE_URL!,\r\nprocess.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\r\n);\r\n\r\n\r\n// Tipos base (ajústalos a tus tablas reales)\r\nexport type DbPlayer = { id: string; name: string; country?: string | null; seed?: number | null };\r\nexport type DbMatch = { id: string; round: 'R16'|'QF'|'SF'|'F'; top_id: string; bot_id: string };\r\nexport type DbDraw = { tournament_id: string; event: string; surface: string; draw_size: number };"],"names":[],"mappings":"AAAA,kBAAkB;;;;;AAClB;;AAGO,MAAM,WAAW,IAAA,yMAAY,gFAEpC,QAAQ,GAAG,CAAC,yBAAyB","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///C:/Proyectos/estratego-web/app/api/tournament/%5Bid%5D/route.ts"],"sourcesContent":["export const dynamic = \"force-dynamic\";\r\n\r\nimport { supabase } from \"@/lib/supabase\";\r\n\r\ntype Player = {\r\n  id: string;\r\n  name: string;\r\n  seed?: number;\r\n  country?: string;\r\n};\r\n\r\ntype Match = {\r\n  id: string;\r\n  round: \"R16\" | \"QF\" | \"SF\" | \"F\" | \"R32\" | \"R64\";\r\n  top: Player;\r\n  bottom: Player;\r\n  winnerId?: string;\r\n};\r\n\r\ntype Bracket = {\r\n  tournamentId: string;\r\n  event: string;\r\n  surface: string;\r\n  drawSize: number;\r\n  matches: Match[];\r\n};\r\n\r\nexport async function GET(request: Request, context: { params: { id: string } }) {\r\n  const { id } = context.params;\r\n\r\n  const { data: hdr, error: e1 } = await supabase\r\n    .from(\"tournaments\")\r\n    .select(\"tourney_id,name,surface,draw_size\")\r\n    .eq(\"tourney_id\", id)\r\n    .single();\r\n\r\n  if (e1 || !hdr) {\r\n    return new Response(JSON.stringify({ error: e1?.message || \"Torneo no encontrado\" }), {\r\n      status: 404,\r\n    });\r\n  }\r\n\r\n\r\n  // 2. Partidos\r\n  const { data: rows, error: e2 } = await supabase\r\n    .from(\"draw_matches\")\r\n    .select(\"id,round,top_id,bot_id,winner_id\")\r\n    .eq(\"tourney_id\", id)\r\n    .order(\"id\", { ascending: true });\r\n\r\n  if (e2) {\r\n    return new Response(JSON.stringify({ error: e2.message }), { status: 500 });\r\n  }\r\n\r\n  const list = rows ?? [];\r\n\r\n  // 3. Recolectar IDs de jugadores únicos\r\n  const ids = Array.from(new Set(list.flatMap(r => [r.top_id, r.bot_id]).filter(Boolean)));\r\n\r\n  const { data: plist, error: e3 } = await supabase\r\n    .from(\"players_dim\")\r\n    .select(\"player_id,name,country\")\r\n    .in(\"player_id\", ids);\r\n\r\n  if (e3) {\r\n    return new Response(JSON.stringify({ error: e3.message }), { status: 500 });\r\n  }\r\n\r\n  const pmap = new Map<string, typeof plist[number]>();\r\n  (plist ?? []).forEach(p => pmap.set(p.player_id, p));\r\n\r\n  // 4. Armar lista de partidos\r\n  const matches: Match[] = list.map(row => {\r\n    const tp = row.top_id ? pmap.get(row.top_id) : null;\r\n    const bp = row.bot_id ? pmap.get(row.bot_id) : null;\r\n\r\n    const top: Player = {\r\n      id: row.top_id ?? \"TBD\",\r\n      name: tp?.name ?? \"TBD\",\r\n      country: tp?.country ?? undefined,\r\n\r\n    };\r\n\r\n    const bottom: Player = {\r\n      id: row.bot_id ?? \"TBD\",\r\n      name: bp?.name ?? \"TBD\",\r\n      country: bp?.country ?? undefined,\r\n\r\n    };\r\n\r\n    return {\r\n      id: row.id,\r\n      round: row.round,\r\n      top,\r\n      bottom,\r\n      winnerId: row.winner_id ?? undefined,\r\n    };\r\n  });\r\n\r\n  const bracket: Bracket = {\r\n    tournamentId: hdr.tourney_id,\r\n    event: hdr.name,\r\n    surface: hdr.surface,\r\n    drawSize: hdr.draw_size,\r\n    matches,\r\n  };\r\n\r\n  return new Response(JSON.stringify(bracket), {\r\n    status: 200,\r\n    headers: { \"content-type\": \"application/json\" },\r\n  });\r\n}\r\n"],"names":[],"mappings":";;;;;;AAEA;AAFO,MAAM,UAAU;;AA2BhB,eAAe,IAAI,OAAgB,EAAE,OAAmC;IAC7E,MAAM,EAAE,EAAE,EAAE,GAAG,QAAQ,MAAM;IAE7B,MAAM,EAAE,MAAM,GAAG,EAAE,OAAO,EAAE,EAAE,GAAG,MAAM,6HAAQ,CAC5C,IAAI,CAAC,eACL,MAAM,CAAC,qCACP,EAAE,CAAC,cAAc,IACjB,MAAM;IAET,IAAI,MAAM,CAAC,KAAK;QACd,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,OAAO,IAAI,WAAW;QAAuB,IAAI;YACpF,QAAQ;QACV;IACF;IAGA,cAAc;IACd,MAAM,EAAE,MAAM,IAAI,EAAE,OAAO,EAAE,EAAE,GAAG,MAAM,6HAAQ,CAC7C,IAAI,CAAC,gBACL,MAAM,CAAC,oCACP,EAAE,CAAC,cAAc,IACjB,KAAK,CAAC,MAAM;QAAE,WAAW;IAAK;IAEjC,IAAI,IAAI;QACN,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,OAAO,GAAG,OAAO;QAAC,IAAI;YAAE,QAAQ;QAAI;IAC3E;IAEA,MAAM,OAAO,QAAQ,EAAE;IAEvB,wCAAwC;IACxC,MAAM,MAAM,MAAM,IAAI,CAAC,IAAI,IAAI,KAAK,OAAO,CAAC,CAAA,IAAK;YAAC,EAAE,MAAM;YAAE,EAAE,MAAM;SAAC,EAAE,MAAM,CAAC;IAE9E,MAAM,EAAE,MAAM,KAAK,EAAE,OAAO,EAAE,EAAE,GAAG,MAAM,6HAAQ,CAC9C,IAAI,CAAC,eACL,MAAM,CAAC,0BACP,EAAE,CAAC,aAAa;IAEnB,IAAI,IAAI;QACN,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,OAAO,GAAG,OAAO;QAAC,IAAI;YAAE,QAAQ;QAAI;IAC3E;IAEA,MAAM,OAAO,IAAI;IACjB,CAAC,SAAS,EAAE,EAAE,OAAO,CAAC,CAAA,IAAK,KAAK,GAAG,CAAC,EAAE,SAAS,EAAE;IAEjD,6BAA6B;IAC7B,MAAM,UAAmB,KAAK,GAAG,CAAC,CAAA;QAChC,MAAM,KAAK,IAAI,MAAM,GAAG,KAAK,GAAG,CAAC,IAAI,MAAM,IAAI;QAC/C,MAAM,KAAK,IAAI,MAAM,GAAG,KAAK,GAAG,CAAC,IAAI,MAAM,IAAI;QAE/C,MAAM,MAAc;YAClB,IAAI,IAAI,MAAM,IAAI;YAClB,MAAM,IAAI,QAAQ;YAClB,SAAS,IAAI,WAAW;QAE1B;QAEA,MAAM,SAAiB;YACrB,IAAI,IAAI,MAAM,IAAI;YAClB,MAAM,IAAI,QAAQ;YAClB,SAAS,IAAI,WAAW;QAE1B;QAEA,OAAO;YACL,IAAI,IAAI,EAAE;YACV,OAAO,IAAI,KAAK;YAChB;YACA;YACA,UAAU,IAAI,SAAS,IAAI;QAC7B;IACF;IAEA,MAAM,UAAmB;QACvB,cAAc,IAAI,UAAU;QAC5B,OAAO,IAAI,IAAI;QACf,SAAS,IAAI,OAAO;QACpB,UAAU,IAAI,SAAS;QACvB;IACF;IAEA,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC,UAAU;QAC3C,QAAQ;QACR,SAAS;YAAE,gBAAgB;QAAmB;IAChD;AACF","debugId":null}}]
}